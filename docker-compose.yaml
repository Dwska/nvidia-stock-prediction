version: "3"
services:
  jupyter:
    build:
      context: ./docker
      dockerfile: Dockerfile.jupyter
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - "./notebook:/home/jovyan/work"
    networks:
      - mlflow
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}

  mlflow-web:
    build:
      context: ./docker
      dockerfile: Dockerfile.mlflow
    ports:
      - "5000:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
    networks:
      - mlflow
    entrypoint: mlflow server --backend-store-uri postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@pgsql/${DB_DATABASE} --default-artifact-root s3://${MLFLOW_ARTIFACT_BUCKET}/ --artifacts-destination s3://${MLFLOW_ARTIFACT_BUCKET}/ -h 0.0.0.0
    depends_on:
      - pgsql
      - minio

  minio:
    image: minio/minio:RELEASE.2024-10-02T17-50-41Z
    ports:
      - "${FORWARD_MINIO_PORT:-9000}:9000"
      - "${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - "mlflow-minio:/data/minio"
    networks:
      - mlflow
    command: 'minio server /data/minio --console-address ":8900"'
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:9000/minio/health/live"
      retries: 3
      timeout: 5s

  pgsql:
    image: "postgres:14"
    ports:
      - "${FORWARD_DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - "mlflow-pgsql:/var/lib/postgresql/data"
    networks:
      - mlflow
    healthcheck:
      test:
        - CMD
        - pg_isready
        - "-q"
        - "-d"
        - "${DB_DATABASE}"
        - "-U"
        - "${DB_USERNAME}"
      retries: 3
      timeout: 5s

networks:
  mlflow:
    driver: bridge

volumes:
  mlflow-pgsql:
    driver: local
  mlflow-minio:
    driver: local
